<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第三章列表笔记</title>
      <link href="/2022/02/13/di-san-zhang-lie-biao-bi-ji/"/>
      <url>/2022/02/13/di-san-zhang-lie-biao-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="3-1访问列表元素"><a href="#3-1访问列表元素" class="headerlink" title="3.1访问列表元素"></a>3.1访问列表元素</h2><pre><code>name=['1','2','3'] #[]是列表符号，列表理解为集合，其中包含元素print(name)</code></pre><p>输出为全列表包含列表符号[‘1’,’2’,’3’]</p><blockquote><p>如果想要访问单个元素，需要添加位置索引，且第一个元素位置定义为0</p><p>例如，访问第二个列表元素，位置索引为1</p><p>访问格式如下</p><p><code>print(name[1])</code></p><p>输出为2</p></blockquote><blockquote><p>特殊的</p><p>最后一个元素位置索引定义为-1</p><p>倒数第二个元素位置索引为-2</p><p>以此类推</p></blockquote><blockquote><p>列表中的值可以作为变量(字符)来使用，去构成语句。</p><pre><code>message='i want a'+name[1].title()print(message)</code></pre><p>输出为 i want a 2</p><p>#列表变量不需要加引号定义为字符；列表变量可添加方法</p></blockquote><h2 id="3-2修改，添加，删除元素"><a href="#3-2修改，添加，删除元素" class="headerlink" title="3.2修改，添加，删除元素"></a>3.2修改，添加，删除元素</h2><blockquote><p>修改示例</p><pre><code>name=['1','2','3']name[0]='4'print(name)</code></pre><p>输出的列表变成[‘4’,’2’,’3’]</p></blockquote><blockquote><p>添加示例</p><p>在列表<strong>末尾添加</strong>新元素，使用方法append()</p><pre><code>name.append('5')print(name)</code></pre></blockquote><blockquote><p>在列表中<strong>插入</strong>元素，使用方法insert()</p><pre><code>name.insert(1,'6') print(name)#1为insert提供了位置索引，元素6将作为第2个元素出现在列表中</code></pre></blockquote><blockquote><p>删除示例</p><p>使用del语句<strong>永久删除</strong>元素，不以方法的形式出现。</p><pre><code>del name[0]print(name)#name列表中的第一个元素将被删除</code></pre></blockquote><blockquote><p>使用方法pop()<strong>删除元素且继续使用</strong>，以方法的形式出现。</p><p>术语弹出（pop）源自这样的类比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。</p><pre><code>motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles) popped_motorcycle = motorcycles.pop() #方法内可添加位置索引，默认为-1元素print(motorcycles)#此时打印出的原列表为弹出元素后的列表print(popped_motorcycle)#被弹出的元素构成的列表</code></pre></blockquote><blockquote><p>删除已知内容的元素</p><p>使用方法remove()，使用remove()从列表中删除元素时，也可接着使用它的值。</p><p><strong>注意</strong></p><p>方法remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值。你将在第7章学习如何这样做。</p><pre><code>name.remove('1')#注意要带引号print(name)#输出为['2','3']</code></pre></blockquote><p>理论上方法remove()可以保存被删除的元素，前提是要提前将该元素存储到变量中，毕竟你使用方法remove()时已经知道元素的内容了。转换成代码如下：</p><pre><code>names=['l','z','q','m']dislike=names.remove('z') #此处仿方法pop()使用print(names)print(dislike) #输出为nonemotorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']print(motorcycles)too_expensive = 'ducati'  #提前定义元素为变量motorcycles.remove(too_expensive) print(motorcycles) print(too_expensive) #输出为ducati，虽然感觉很鸡肋，但是做个删除记录显示就好。 </code></pre><h2 id="3-3组织列表"><a href="#3-3组织列表" class="headerlink" title="3.3组织列表"></a>3.3组织列表</h2><blockquote><p><strong>永久性排序</strong>，使用方法sort()#默认按照字母顺序正序排列，如需要逆向排列，需要向方法传递参数reverse=True,改为sort(reverse=True)</p><pre><code>name=['a','c','b']name.sort()print(name) #输出为['a','b','c']</code></pre></blockquote><blockquote><p><strong>暂时性排序</strong>，使用方法sorted()，如需要逆向排列，需要向方法传递参数reverse=True,改为sorted(reverse=True)</p><pre><code>print("Here is the sorted list:") print(sorted(cars)) #直接作为内容出现，而非单独成行的处理措施。print("Here is the original list again:") print(cars) #再次print,列表未改变顺序。</code></pre></blockquote><blockquote><p>反转列表</p><p>使用方法reverse()</p><pre><code>name.reverse()print(name) #恢复的话只需要再次reverse()</code></pre></blockquote><blockquote><p>确定列表长度</p><p>使用函数len()</p><pre><code>name=['1','2','3']len(name) #输出为3，len相似于print</code></pre></blockquote><blockquote><p>索引错误反馈，解决方法，将位置索引减一，(鉴于列表索引差一的特征)，或者，可以采用-1来访问最后一个元素。</p><p>以下为错误反馈内容</p><pre><code>Traceback (most recent call last):  File "motorcycles.py", line 3, in &lt;module&gt;  print(motorcycles[3]) IndexError: list index out of range </code></pre></blockquote><blockquote><p>终极解决方法，全print出来，用眼看。QAQ</p><p>发生索引错误却找不到解决办法时，请尝试将列表或其长度打印出来。列表可能与你以为的截然不同，在程序对其进行了动态处理时尤其如此。通过查看列表或其包含的元素数，可帮助你找出这种逻辑错误。</p></blockquote><h2 id="3-4方法，函数，语句总结"><a href="#3-4方法，函数，语句总结" class="headerlink" title="3.4方法，函数，语句总结"></a>3.4方法，函数，语句总结</h2><p>访问|name[0]|</p><p>添加|.insert(1,’content’)|.append(‘content’)|</p><p>删除|del name[0]|.pop()|.remove()|</p><p>更改|name[0]=’content’|</p><p>组织|.sort()|.sorted()|.reverse()|</p><p>测量|len()语句|</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 记录/（记录，理解） </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试MarkText目录</title>
      <link href="/2022/02/11/ce-shi-marktext-mu-lu/"/>
      <url>/2022/02/11/ce-shi-marktext-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="一-一级目录"><a href="#一-一级目录" class="headerlink" title="一.一级目录"></a>一.一级目录</h1><h2 id="1-二级目录"><a href="#1-二级目录" class="headerlink" title="1.二级目录"></a>1.二级目录</h2><p>二级目录下述内容测试</p><h2 id="2-二级目录多项测试"><a href="#2-二级目录多项测试" class="headerlink" title="2.二级目录多项测试"></a>2.二级目录多项测试</h2><h1 id="二-二级目录"><a href="#二-二级目录" class="headerlink" title="二.二级目录"></a>二.二级目录</h1><p>代码块测试</p><p><code>print(what is code)</code></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目录 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章变量笔记</title>
      <link href="/2022/01/25/di-er-zhang-bian-liang-bi-ji/"/>
      <url>/2022/01/25/di-er-zhang-bian-liang-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>1.message and print</p><pre><code>message=print(message)</code></pre><pre><code>print('message')</code></pre><p>2.制表符和换行符<br>制表符\t 前加空格<br>换行符\n 换行<br>通过使用制表符和换行符来实现单行代码输出多行和添加空格</p><pre><code>print('eg:\n\tone\n\ttwo')</code></pre><p>3.删除空格<br>左删.lstrip() l是left的缩写<br>右删.rstrip() r是right的缩写<br>全删.strip()</p><pre><code>message=' test 'print(message.strip())</code></pre><p>4.使用函数 str()避免类型错误【指示确认字符串】<br>str(变量)</p><pre><code>age = 23 message = "Happy " + str(age) + "rd Birthday!"  #str()如果换成age会出现错误，无法确认非字符串还是字符串print(message)</code></pre><p>5.修改字符串的大小写<br>首字母大写</p><pre><code>name=hope_leeprint(name.title())</code></pre><p>全部大写</p><pre><code>name=hope_leeprint(name.upper())</code></pre><p>全部小写</p><pre><code>name=hope_leeprint(name.lower())</code></pre><p>6.数学运算<br>加减乘除全部适用包括运算法则<br>2+3 3-2 2*3 4/2<br>次方运算是双乘号<br>3**2<br>小数(浮点数)运算会因为计算机本身的原因，结果包含的小数位数可能是不确定的。</p><blockquote><blockquote><blockquote><p>0.2+0.1<br>0.30000000000000004<br>所有语言都存在这种问题，解决办法是通过特定的指令忽略多余的小数位数。</p></blockquote></blockquote></blockquote><p>实验内容，测试三个引号能否实现代码块<br>‘’’print()’’’</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 记录/（记录，理解） </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zen of Python转载记录</title>
      <link href="/2022/01/25/zen-of-python-zhuan-zai-ji-lu/"/>
      <url>/2022/01/25/zen-of-python-zhuan-zai-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>Zen of Python（Python之禅）<br>Beautiful is better than ugly. （优美比丑陋好）</p><p>Explicit is better than implicit.（清晰比晦涩好）</p><p>Simple is better than complex.（简单比复杂好）</p><p>Complex is better than complicated.（复杂比错综复杂好）</p><p>Flat is better than nested.（扁平比嵌套好）</p><p>Sparse is better than dense.（稀疏比密集好）</p><p>Readability counts.（可读性很重要）</p><p>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）</p><p>Although practicality beats purity.（但现实往往并不那么完美）</p><p>Errors should never pass silently.（异常不应该被静默处理）</p><p>Unless explicitly silenced.（除非你希望如此）</p><p>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）</p><p>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）</p><p>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人[这里指的是Python之父Guido]）</p><p>Now is better than never.（现在开始做比不做好）</p><p>Although never is often better than <em>right</em> now.（不做比盲目去做好[极限编程中的YAGNI原则]）</p><p>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）</p><p>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）</p><p>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Python </tag>
            
            <tag> 记录/（记录，理解） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Vlog</title>
      <link href="/2022/01/23/my-first-blog/"/>
      <url>/2022/01/23/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>测试内容</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/23/hello-world/"/>
      <url>/2022/01/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
